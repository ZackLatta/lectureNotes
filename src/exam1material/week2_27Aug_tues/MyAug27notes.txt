Homework 1 due tonight

I'll post Homework 2 after class (due Tues Sep 3)

/////////////////////

Today:

- design circuits
- review implies operator
- evaluating logical statements
- compound truth tables
- using Logika
- parse trees
- begin propositional logic

//////////////////////////////////////////

Design circuits for:

¬(p ∨ q)       (p NOR q)

¬(p ∧ (q ∨ r))

p XOR q (with just the gates we've seen, not a specific XOR gate)

/////////////////////////////////////

How would we evaluate the output of these circuits with
different inputs?


/////////////////////////////////////

Review: IMPLIES operator →

"If I have a test, then I will study"

p: I have a test
q: I will study

p → q

It is false if we have BROKEN A PROMISE.
Otherwise we have not.

p q  #  p → q
--------------
T T  #    T
T F  #    F
F T  #    T
F F  #    T

//////////////////////////////////////

Evaluating logical statements.

Basic operations:

∧ - AND
∨ - OR (inclusive or)
¬ - NOT
→ - IMPLIES

////////////////////////////////////////

Consider ¬p ∨ q ∧ r.

--> what operation do we do first?

the AND operation is done first, then we do the OR operation

Order of operations

In math?
Parenthesis
E
M
D
A
S

For logic statements:

P. NOT, AND, OR, IMPLIES

From highest (happens first) to lowest (happens last) precedence:


Given this statement:

    ¬p ∨ q ∧ r

Add () to show the order of operations.

((¬p) ∨ (q ∧ r))


Evaluate the above statement using these
variable assignments:

p is T
q is F
r is F

((-T) v (F^F)
F v F
F


////////////////////////////////////////////////

Order of operations
    ¬ evaluates right to left
        (¬(¬p)) is equivalent to....

    ∧ and ∨ evaluate left to right
        p ∧ q ∧ r is equivalent to.... (P ^ q) ^ r
        p ∨ q ∨ r is equivalent to.... (p v q) v r

    → evaluates right to left
        p → q → r is equivalent to.... p → (q → r)





//////////////////////////////////////////

Top-level operator (what happens LAST?)


(((¬p) ∧ q) ∨ r)


top-level:
OR

How is this similar to a circuit?
Output (the one we do last


///////////////////////////////

p ∧ q ∨ r ∧ p

rewrite with ():
((p ^ q) v (r ^ p))
top-level operator?
OR


//////////////////////////////

p ∧ q ∧ r ∧ s

rewrite with ():
((p^q) ^ r) ^ s

top-level operator?
Right most AND
////////////////////////////////////////////////////

Classifying logical statements.

Contingent, contradictory, tautology


Definitions/examples

contingent - the overall statements is true for
    some truth assignments and false for others

    Example?
    p v q

contradictory - for all possible truth assignments,
    the overall statement is false

    Example?
    (p v q) ^ !(p v q)
    p ^ !p

tautology - for all possible truth assignments,
    the overall statement is true

    Example?
p → p
p v !p
∧ ∨ ¬ →

///////////////////////////////////////////

Compound truth tables.



Write a truth table for:

(p ∧ r) → (r ∨ ¬q)

                  *
-----------------------------
p q r  #  (p ∧ r) → (r ∨ ¬q)
-----------------------------
T T T  #
T T F  #
T F T  #
T F F  #
F T T  #
F T F  #
F F T  #
F F F  #


--> top-level operator?

--> need to evaluate statement on ALL possible truth assignments

--> how many truth assignments are there?

--> how would we classify this truth table?


/////////////////////////////////////////

complete truth table in truth.logika

--> what to type for different operators

--> order of operations in Logika

//////////////////////////////////////

Example: or.logika
AND: &
OR:|
NOT: !
IMPLIES: ->:
Make sure everything is lined up

//////////////////////////////////////


parse trees

--> what are they?

--> draw one for (p ∧ q) → ¬r

--> draw one for p ∨ q ∧ r → ¬p → ¬q ∨ s


--> how do they relate to programming?

--> what is the "top-level operator" here?




////////////////////////////////////////

Propositional logic.


- a set of propositional atoms (statements that can be T/F)
    --> these will be our boolean variables in logic statements



- connected by logical operators



- join together to make new propositions (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions?

Today is Thursday.


What time is it?


x == 2


Pigs can fly.


Drive carefully.


y <= 4



////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.

    q: It is snowing.

    r: y <= 4

    s: x == 2


How would we express these as English sentences?

    ¬p:


    p ∧ q:


    p → q :


    ¬p → ¬q:


    r ∨ s:

    ¬r:

////////////////////////

Next time:

- A bit more with translations
- Equivalent propositions
- DeMorgan's laws
- Equivalent if-statements
- Negating if-statements
- Proving equivalence with truth tables
- Satisfiability

