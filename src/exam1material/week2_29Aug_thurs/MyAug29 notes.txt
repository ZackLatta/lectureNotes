HW 2 due Tuesday, September 3

--> will be creating 2 image files

--> make sure those are added to your git repository!

--> no office hours Monday, September 2

////////////////////////////

HW 1 (knights/knaves)

Gabby says: Lewis and I are both knights.
Lewis says: Ellie would say I am a knight.
Ellie says: Either I am a knight or Lewis is a knight, but not both of us.


How do we deal with Lewis's statement?




////////////////////////////

Today:
- begin propositional logic
- equivalent statements
- satisfiability

////////////////////////////////////////

Propositional logic.


- a set of *propositional atoms* (statements that can be T/F)
    --> these will be our boolean variables in logic statements
    --> minimal (don't contain any logical operators)


- connected by logical operators



- join together to make new *propositions* (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions? Propositional atoms?

Today is Thursday.


What time is it?


x == 2


x != 2


Pigs can fly.


z != 7 && str.contains(sub)


Drive carefully.

Not a prposition


y <= 4


I am hungry and thirsty.



////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.

    q: It is snowing.

    r: y <= 4

    s: x == 2


How would we express these as English sentences?

    ¬p:
    it is not below freezing


    p ∧ q:
    it is below freezing and it is snowing

    p → q :
If it is below Freezing, then it is snowing

    ¬p → ¬q:
If it is not below freezing, then it is not snowing

    r ∨ s:
    y <= 4 || x == 2

    ¬r:
    y > 4

////////////////////////

Example:

You can't enroll for the course if you haven't taken the prerequisite.


--> what are the propositional atoms?

You can enroll in the course
you have taken the prereq

--> translate to propositional logic:
¬q → ¬p



--> more translations:

if you can enroll, you have taken the prereq

p → q


They are equivalent because for every truth assignment, they have te same output


/////////////

Example:

if (x <= 2 || y >= 0) {
    if (z != 17) {
        answer = 25;
    }
}

How could we write what our if-statement is doing?

If I meet all my conditions, then the answer is 25

Propositional atoms/translation?

p: x <= 2
q: y >= 0
r: z == 17
s: answer == 25

(p v q) ^ !r -> 25

--> what must be true if answer is NOT 25?

(x > 2 && y < 0) || z == 17

!s -> !((p V q) ^ !r)
!s -> !(p V q) v r
!s -> (!p ^ !q) v r


//////////////////////////////////

Consider these two statements:



1) If I am at least 16 years old, then I can drive a car.

2) I'm not at least 16 years old or I can drive a car.


--> how could we translate them to propositional logic statements?




--> are they saying the same thing?




--> could we PROVE it?

(equiv1.logika and equiv2.logika)







//////////////////////////////////

DeMorgan's Laws.

...DeMorgan has so many laws...these are a couple of them.




if (a == 4 || a == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?

if (a != 4 && a != 5)




///

if (a == 4 && b == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?

if (a !=4 || b != 5)



//////////////////////////////

DeMorgan's laws in propositional logic:

¬(p ∨ q) is equivalent to...
!p ^ !q

¬(p ∧ q) is equivalent to...
!p v !q

--> how can we prove the first of DeMorgan's laws?

(demorgan1.logika and demorgan2.logika)



////////////////////////

Another if-statement example.

if (Character.isDigit(letter) == true || num < 10) {
    statements
}

--> how would we negate it without using a ! operator?

if (Character.isDigit(letter) == false && num >= 10




///////////////////////

And one more. Negate this one:

if ((y >= 4 && num != 14) || x > 0) {
    statements
}

negate it:

if ((y < 4 || num == 14) && x <=0)





///////////////////////

Other equivalences (≡ means "is equivalent to").
(If we wanted, how could we prove them?)


¬(p ∧ q) ≡ ¬p ∨ ¬q              (DeMorgan's laws)
¬(p ∨ q) ≡ ¬p ∧ ¬q


p ∧ T ≡ p                       (identity laws)
p ∨ F ≡ p


p ∨ p ≡ p                       (idempotent laws)
p ∧ p ≡ p

¬(¬p) ≡ p                       (double negation law)


p ∨ q ≡ q ∨ p                   (commutative laws)
p ∧ q ≡ q ∧ p

p ->q vs q -> p?????
P = F
q = T
first statement is true
second is false

(p ∨ q) ∨ r ≡ p ∨ (q ∨ r)       (associative laws)
(p ∧ q) ∧ r ≡ p ∧ (q ∧ r)


p ∨ (q ∧ r) ≡ (p ∨ q) ∧ (p ∨ r)     (distributive laws)
p ∧ (q ∨ r) ≡ (p ∧ q) ∨ (p ∧ r)



p → q ≡ ¬q → ¬p                     (contrapositive)
p → q ≡ ¬p ∨ q                      (can turn implies into an or)



//////////////////////////

What is equivalent to:

¬p → q


//////////////////////////

are these equivalent?

    (p → q) → r
    p → (q → r)

to show that they are not equivalent, just need one truth assignement where the output differs






In general, how to show statements are NOT equivalent?
one truth assignment

/////////////////////////

Satisfiability.

- definition: a statement is satisfiable if there is at least
one truth assignment that makes the statement true


- what kind of statement is satisfiable? what kind is not?

satisfiable: contingent, tautology
not satisfiable: contradictory


- is this satisfiable?

        (p ∨ ¬q) ∧ (q ∨ ¬r) ∧ (r ∨ ¬p)








SAT
straightforward approach to checking all possibilities:




- Aside: P and NP problems

running time programs

can we solve a problem in polynomial time?

can we check a solution to a problem in polynomial time?



////////////////////////

Next time:
- how to prove an argument


